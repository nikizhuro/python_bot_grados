from telebot import TeleBot, types

bot = TeleBot('8089918683:AAGh2C4XUnM-MLZDFVzU5jr4zojSZxUTSgQ')
user_states = {}

print('bot started...)')

@bot.message_handler(commands=['start'])

class UserData:
    def __init__(self):
        self.step = 0
        self.choices = {}

@bot.message_handler(commands=['start'])
def start(msg):
    main_text = (
        "–í–∞—Å –≤—ñ—Ç–∞—î –∫–æ–º–∞–Ω–¥–∞ –ì—Ä–∞–¥–æ—Å –ö–æ–Ω—Å—Ç—Ä–∞–∫—à–Ω ‚Äî –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –∑–∞–±—É–¥–æ–≤–Ω–∏–∫–∞ –∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —è–∫—ñ—Å—Ç—å —ñ –¥–æ–≤—ñ—Ä—É.\n\n"
        "–ú–∏ –±—É–¥—É—î–º–æ –ñ–ö ¬´–ë—ñ–ª–∞ –°–∞–∫—É—Ä–∞¬ª —É –º—ñ—Å—Ç—ñ –ü–µ—Ä–µ—á–∏–Ω, –ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å.\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –ñ–ö\n"
        "‚Ä¢ –æ–±—Ä–∞—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É\n"
        "‚Ä¢ –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é"
    )

    markup = types.InlineKeyboardMarkup()

    markup.add(types.InlineKeyboardButton("üîÅ –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫", callback_data="feedback"))
    markup.add(types.InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞", callback_data="manager"))
    markup.add(types.InlineKeyboardButton("üèô –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –ñ–ö", callback_data="about_jk"))

    bot.send_message(msg.chat.id, main_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    user_id = call.from_user.id
    if user_id not in user_states:
        user_states[user_id] = UserData()
    data = call.data

    if data == "feedback":
        user_states[user_id] = UserData()
        send_question1(call)
    elif data in ["1–∫", "2–∫", "3–∫", "commercial"]:
        user_states[user_id].choices["type"] = data
        send_question2(call)
    elif data == "next2":
        send_question3(call)
    elif data.startswith("q2_"):
        toggle_checklist(user_id, "q2", data[3:])
        send_question2(call, edit=True)
    elif data == "next3":
        send_summary(call)
    elif data.startswith("q3_"):
        toggle_checklist(user_id, "q3", data[3:])
        send_question3(call, edit=True)
    elif data == "restart":
        user_states[user_id] = UserData()
        send_question1(call)
    elif data == "continue":
        bot.send_message(call.message.chat.id, "–Ø–∫ –Ω–∞–º –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è –¥–æ –í–∞—Å?")
        user_states[user_id].step = "ask_name"
    elif data == "manager":
        bot.send_message(call.message.chat.id, "–ú–µ–Ω–µ–¥–∂–µ—Ä –ì–µ—Ä–º–∞–Ω: +380–•–•–•00900–•–•")
    elif data == "about_jk":
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üè¢ –û–ø–∏—Å –∫–æ–º–ø–∞–Ω—ñ—ó", callback_data="about_company"))
        markup.add(types.InlineKeyboardButton("üèò –û–ø–∏—Å –ñ–ö", callback_data="about_complex"))
        markup.add(types.InlineKeyboardButton("–§–∞–π–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó", callback_data="presentation"))
        markup.add(types.InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
        bot.send_message(call.message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å:", reply_markup=markup)
    elif data == "main_menu":
        start(call.message)

@bot.message_handler(
    func=lambda m: user_states.get(m.from_user.id, None) and user_states[m.from_user.id].step == "ask_name")
def handle_name(msg):

    user_states[msg.from_user.id].choices["name"] = msg.text
    bot.send_message(msg.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    user_states[msg.from_user.id].step = "ask_phone"

@bot.message_handler(
    func=lambda m: user_states.get(m.from_user.id, None) and user_states[m.from_user.id].step == "ask_phone")
def handle_phone(msg):

    user_states[msg.from_user.id].choices["phone"] = msg.text
    bot.send_message(msg.chat.id, "–î—è–∫—É—î–º–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î –í–∞–º.\n–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
    start(msg)

def send_question1(call):
    markup = types.InlineKeyboardMarkup()

    markup.add(types.InlineKeyboardButton("1-–∫—ñ–º–Ω–∞—Ç–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞", callback_data="1–∫"))
    markup.add(types.InlineKeyboardButton("2-–∫—ñ–º–Ω–∞—Ç–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞", callback_data="2–∫"))
    markup.add(types.InlineKeyboardButton("3-–∫—ñ–º–Ω–∞—Ç–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞", callback_data="3–∫"))
    markup.add(types.InlineKeyboardButton("–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è", callback_data="commercial"))

    bot.send_message(call.message.chat.id, "–ü–∏—Ç–∞–Ω–Ω—è 1/3: –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:", reply_markup=markup)

def send_question2(call, edit=False):
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup()
    opts = [
        ("–ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä–æ–∑—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è", "installment"),
        ("–ü—Ä–æ–≥—Ä–∞–º–∞ –∫—Ä–µ–¥–∏—Ç—É–≤–∞–Ω–Ω—è '—î–û—Å–µ–ª—è'", "credit"),
        ("–Ø–∫—ñ—Å–Ω–µ –æ–∑–¥–æ–±–ª–µ–Ω–Ω—è", "finish"),
    ]
    selected = user_states[user_id].choices.get("q2", set())
    for name, key in opts:
        checked = "‚úÖ " if key in selected else ""
        markup.add(types.InlineKeyboardButton(f"{checked}{name}", callback_data=f"q2_{key}"))
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ", callback_data="next2"))
    text = "–ü–∏—Ç–∞–Ω–Ω—è 2/3: –©–æ —â–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –í–∞—Å –ø—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ?"
    if edit:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

def send_question3(call, edit=False):
    user_id = call.from_user.id
    markup = types.InlineKeyboardMarkup()
    opts = [
        ("–î–∏—Ç—è—á–∏–π –º–∞–π–¥–∞–Ω—á–∏–∫ —É –¥–≤–æ—Ä—ñ", "playground"),
        ("–®–∫–æ–ª–∞/—Å–∞–¥–æ–∫ –ø–æ—Ä—É—á", "school"),
        ("–í–µ–ª–∏–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∫–æ–º—ñ—Å—Ü—å", "parking"),
    ]
    selected = user_states[user_id].choices.get("q3", set())
    for name, key in opts:
        checked = "‚úÖ " if key in selected else ""
        markup.add(types.InlineKeyboardButton(f"{checked}{name}", callback_data=f"q3_{key}"))
    markup.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—ñ", callback_data="next3"))
    text = "–ü–∏—Ç–∞–Ω–Ω—è 3/3: –Ø–∫–∞ —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è –í–∞—Å?"
    if edit:
        bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, text, reply_markup=markup)

def send_summary(call):
    user_id = call.from_user.id
    data = user_states[user_id].choices
    text = (
        "–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        "–í–∏ –æ–±—Ä–∞–ª–∏:\n"
        f"- –¢–∏–ø: {data.get('type')}\n"
        f"- –û–ø—Ü—ñ—ó: {', '.join(data.get('q2', []))}\n"
        f"- –Ü–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {', '.join(data.get('q3', []))}\n"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="continue"))
    markup.add(types.InlineKeyboardButton("–í–∏–±—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É", callback_data="restart"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)

def toggle_checklist(user_id, key, value):
    choices = user_states[user_id].choices
    if key not in choices:
        choices[key] = set()
    if value in choices[key]:
        choices[key].remove(value)
    else:
        choices[key].add(value)

bot.polling()